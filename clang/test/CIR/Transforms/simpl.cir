// RUN: cir-opt %s -cir-simplify -o - | FileCheck %s

!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
module {
cir.func @foo(%arg0: !cir.ptr<!s32i>) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["ptr", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i>
      %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i>
      %6 = cir.cmp(eq, %4, %5) : !cir.ptr<!s32i>, !s32i
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
      %8 = cir.unary(not, %7) : !cir.bool, !cir.bool
      %9 = cir.cast(bool_to_int, %8 : !cir.bool), !s32i
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool
      %11 = cir.unary(not, %10) : !cir.bool, !cir.bool
      %12 = cir.cast(bool_to_int, %11 : !cir.bool), !s32i 
      %13 = cir.cast(integral, %12 : !s32i), !s64i
      %14 = cir.cast(int_to_bool, %13 : !s64i), !cir.bool
      cir.if %14 {
        cir.return
      }
    }
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i>
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i
    %3 = cir.unary(inc, %2) : !s32i, !s32i
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i>
    cir.return
  }
} 

// CHECK: cir.scope {
// CHECK:   %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i>
// CHECK:   %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i>
// CHECK:   %6 = cir.cmp(eq, %4, %5) : !cir.ptr<!s32i>, !s32i
// CHECK:   %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
// CHECK:   cir.if %7 {
// CHECK:     cir.return
// CHECK:   }
// CHECK: }