// RUN: cir-opt %s -cir-flat -o - | FileCheck %s

!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void

module {

//  ====   Alloca in the top of a function
// C code
// int return_42() {
//   int y = 42;
//   return y;  
// }

  cir.func @return_42() -> !s32i {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64}
    %2 = cir.const #cir.int<42> : !s32i
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> 
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i>
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i
    cir.return %4 : !s32i
  }

// Verifies:
// - no allocas remain in function
// CHECK:  cir.func @return_42() -> !s32i {
// CHECK:    %0 = cir.const #cir.int<42> : !s32i
// CHECK:    cir.return %0 : !s32i
// CHECK:  }
  


//  ====   Alloca inside loop op
// C code
// int alloca_in_loop(int* ar, int n) {
//   int sum = 0;
//   for (int i = 0; i < n; ++i) {
//     int a = 4;
//     sum += ar[i] + a;
//   }
//   return sum;
// }

  cir.func @alloca_in_loop(%arg0: !cir.ptr<!s32i>, %arg1: !s32i) -> !s32i {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["ar", init] {alignment = 8 : i64}
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["n", init] {alignment = 4 : i64}
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sum", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i>
    %4 = cir.const #cir.int<0> : !s32i
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i>
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
      %8 = cir.const #cir.int<0> : !s32i
      cir.store %8, %7 : !s32i, !cir.ptr<!s32i>
      cir.for : cond {
        %9 = cir.load %7 : !cir.ptr<!s32i>, !s32i
        %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i
        %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool
        cir.condition(%12)
      } body {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["a", init] {alignment = 4 : i64}
          %10 = cir.const #cir.int<4> : !s32i
          cir.store %10, %9 : !s32i, !cir.ptr<!s32i>
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i>
          %12 = cir.load %7 : !cir.ptr<!s32i>, !s32i
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i>
          %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i
          %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i
          %16 = cir.binop(add, %14, %15) : !s32i
          %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i
          %18 = cir.binop(add, %17, %16) : !s32i
          cir.store %18, %3 : !s32i, !cir.ptr<!s32i>
        }
        cir.yield
      } step {
        %9 = cir.load %7 : !cir.ptr<!s32i>, !s32i
        %10 = cir.unary(inc, %9) : !s32i, !s32i
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i>
        cir.yield
      }
    }
    %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i>
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i
    cir.return %6 : !s32i
  }

// Verifies:
// - no allocas remain in function
// - blocks have arguments 
// CHECK:  cir.func @alloca_in_loop(%arg0: !cir.ptr<!s32i>, %arg1: !s32i) -> !s32i {
// CHECK:    %0 = cir.const #cir.int<0> : !s32i
// CHECK:    cir.br ^bb1
// CHECK:  ^bb1:  // pred: ^bb0
// CHECK:    %1 = cir.const #cir.int<0> : !s32i
// CHECK:    cir.br ^bb[[#COND:]](%0, %1 : !s32i, !s32i)
// CHECK:  ^bb[[#COND]](%2: !s32i, %3: !s32i):  // 2 preds: ^bb1, ^bb6
// CHECK:    %4 = cir.cmp(lt, %3, %arg1) : !s32i, !s32i
// CHECK:    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
// CHECK:    cir.brcond %5 ^bb3, ^bb[[#EXIT:]]
// CHECK:  ^bb3:
// CHECK:    cir.br ^bb[[#BODY:]]
// CHECK:  ^bb[[#BODY]]:
// CHECK:    %6 = cir.const #cir.int<4> : !s32i
// CHECK:    %7 = cir.ptr_stride(%arg0 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i>
// CHECK:    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i
// CHECK:    %9 = cir.binop(add, %8, %6) : !s32i
// CHECK:    %10 = cir.binop(add, %2, %9) : !s32i
// CHECK:    cir.br ^bb5
// CHECK:  ^bb5:  // pred: ^bb4
// CHECK:    cir.br ^bb[[#STEP:]]
// CHECK:  ^bb[[#STEP]]:
// CHECK:    %11 = cir.unary(inc, %3) : !s32i, !s32i
// CHECK:    cir.br ^bb[[#COND]](%10, %11 : !s32i, !s32i)
// CHECK:  ^bb[[#EXIT]]:
// CHECK:    cir.br ^bb8
// CHECK:  ^bb8:
// CHECK:    cir.return %2 : !s32i
// CHECK:  }

//  ====   Alloca inside If Op
// C code 
// int alloca_in_ifelse(int x) {
//  int y = 0;
//  if (x > 42) {
//    int z = 2;
//    y = x * z;
//  } else  {
//    int z = 3;
//    y = x * z;
//  }
//
//  y = y + 1;
//  return y;
// }
  cir.func @alloca_in_ifelse(%arg0: !s32i) -> !s32i {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i>
    %3 = cir.const #cir.int<0> : !s32i
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i>
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i
      %10 = cir.const #cir.int<42> : !s32i
      %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool
      cir.if %12 {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["z", init] {alignment = 4 : i64}
        %14 = cir.const #cir.int<2> : !s32i
        cir.store %14, %13 : !s32i, !cir.ptr<!s32i>
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %16 = cir.load %13 : !cir.ptr<!s32i>, !s32i
        %17 = cir.binop(mul, %15, %16) : !s32i
        cir.store %17, %2 : !s32i, !cir.ptr<!s32i>
      } else {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["z", init] {alignment = 4 : i64}
        %14 = cir.const #cir.int<3> : !s32i
        cir.store %14, %13 : !s32i, !cir.ptr<!s32i>
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %16 = cir.load %13 : !cir.ptr<!s32i>, !s32i
        %17 = cir.binop(mul, %15, %16) : !s32i
        cir.store %17, %2 : !s32i, !cir.ptr<!s32i>
     }
    }
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i
    %5 = cir.const #cir.int<1> : !s32i
    %6 = cir.binop(add, %4, %5) : !s32i
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i>
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i>
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i
    cir.return %8 : !s32i
  }

// Verifies:
// - no allocas remain in function
// - blocks have arguments 
// CHECK:  cir.func @alloca_in_ifelse(%arg0: !s32i) -> !s32i {
// CHECK:    %0 = cir.const #cir.int<0> : !s32i
// CHECK:    cir.br ^bb1
// CHECK:  ^bb1:  // pred: ^bb0
// CHECK:    %1 = cir.const #cir.int<42> : !s32i
// CHECK:    %2 = cir.cmp(gt, %arg0, %1) : !s32i, !s32i
// CHECK:    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool
// CHECK:    cir.brcond %3 ^bb3, ^bb2
// CHECK:  ^bb2:  // pred: ^bb1
// CHECK:    %4 = cir.const #cir.int<3> : !s32i
// CHECK:    %5 = cir.binop(mul, %arg0, %4) : !s32i
// CHECK:    cir.br ^bb4(%5 : !s32i)
// CHECK:  ^bb3:  // pred: ^bb1
// CHECK:    %6 = cir.const #cir.int<2> : !s32i
// CHECK:    %7 = cir.binop(mul, %arg0, %6) : !s32i
// CHECK:    cir.br ^bb4(%7 : !s32i)
// CHECK:  ^bb4(%8: !s32i):  // 2 preds: ^bb2, ^bb3
// CHECK:    cir.br ^bb5
// CHECK:  ^bb5:  // pred: ^bb4
// CHECK:    %9 = cir.const #cir.int<1> : !s32i
// CHECK:    %10 = cir.binop(add, %8, %9) : !s32i
// CHECK:    cir.return %10 : !s32i
// CHECK:  }



//  ====   Alloca promoted through bitcast
// C code
// typedef __SIZE_TYPE__ size_t;
// void *alloca(size_t size);
// 
// void test_bitcast(size_t n) {
//   int *c1 = alloca(n);
// }
  cir.func @test_bitcast(%arg0: !u64i) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["n", init] {alignment = 8 : i64}
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["c1", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i>
    %2 = cir.load %0 : !cir.ptr<!u64i>, !u64i
    %3 = cir.alloca !u8i, !cir.ptr<!u8i>, %2 : !u64i, ["bi_alloca"] {alignment = 16 : i64}
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!u8i>), !cir.ptr<!void>
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i>
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>
    cir.return
  }

// Verifies:
// - no allocas remain in function
// CHECK:  cir.func @test_bitcast(%arg0: !u64i) extra(#fn_attr) {
// CHECK:    cir.return
// CHECK:  }





} //module