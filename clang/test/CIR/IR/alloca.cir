// Test the CIR operations can parse and print correctly (roundtrip)

// RUN: cir-opt %s | cir-opt | FileCheck %s
!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>

module  {
  cir.func @foo(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["len", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
    %2 = cir.cast(integral, %1 : !s32i), !u64i 
    %3 = cir.alloca !s32i, cir.ptr <!s32i>, %2 : !u64i, ["tmp"] {alignment = 16 : i64}
    cir.return 
  }
}

//CHECK: module  {

//CHECK-NEXT:  cir.func @foo(%arg0: !s32i) {
//CHECK-NEXT:    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["len", init] {alignment = 4 : i64}
//CHECK-NEXT:    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
//CHECK-NEXT:    %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
//CHECK-NEXT:    %2 = cir.cast(integral, %1 : !s32i), !u64i 
//CHECK-NEXT:    %3 = cir.alloca !s32i, cir.ptr <!s32i>, %2 : !u64i, ["tmp"] {alignment = 16 : i64}
//CHECK-NEXT:    cir.return 
//CHECK-NEXT:  }

//CHECK: }
