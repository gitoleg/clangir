// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR

!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>

module  {
  cir.func @foo(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["len", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
    %2 = cir.cast(integral, %1 : !s32i), !u64i
    %3 = cir.alloca !s32i, cir.ptr <!s32i>, %2 : !u64i, ["tmp"] {alignment = 16 : i64}
    cir.return 
  }
}

//      MLIR: module {
// MLIR-NEXT:  llvm.func @foo(%arg0: i32) attributes {cir.extra_attrs = #cir<extra({})>} {
// MLIR-NEXT:    %0 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:    %1 = llvm.alloca %0 x i32 {alignment = 4 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:    llvm.store %arg0, %1 : i32, !llvm.ptr
// MLIR-NEXT:    %2 = llvm.load %1 : !llvm.ptr -> i32
// MLIR-NEXT:    %3 = llvm.sext %2 : i32 to i64
// MLIR-NEXT:    %4 = llvm.alloca %3 x i32 {alignment = 16 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:    llvm.return
// MLIR-NEXT:  }
// MLIR-NEXT: }
