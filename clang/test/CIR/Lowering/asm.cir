// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s

!s32i = !cir.int<s, 32>

module {

  cir.func no_proto @empty1() {
    cir.asm(has_side_effects, x86_att, {"" "~{dirflag},~{fpsr},~{flags}"})  : () -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "", "~{dirflag},~{fpsr},~{flags}"  : () -> ()
    cir.return
  }

  cir.func no_proto @empty2() {
    cir.asm(has_side_effects, x86_att, {"xyz" "~{dirflag},~{fpsr},~{flags}"})  : () -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "xyz", "~{dirflag},~{fpsr},~{flags}"  : () -> ()
    cir.return
  }

  cir.func @t1(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    cir.asm(has_side_effects, x86_att, {"" "=*m,*m,~{dirflag},~{fpsr},~{flags}"}) %0, %0 : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "", "=*m,*m,~{dirflag},~{fpsr},~{flags}" %1, %1 : (!llvm.ptr, !llvm.ptr) -> ()
    cir.return
  }

  cir.func @t2(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    cir.asm(has_side_effects, x86_att, {"" "*m,~{dirflag},~{fpsr},~{flags}"}) %0 : (!cir.ptr<!s32i>) -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "", "*m,~{dirflag},~{fpsr},~{flags}" %1 : (!llvm.ptr) -> ()
    cir.return
  }

  cir.func @t3(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    cir.asm(has_side_effects, x86_att, {"" "=*m,~{dirflag},~{fpsr},~{flags}"}) %0 : (!cir.ptr<!s32i>) -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "", "=*m,~{dirflag},~{fpsr},~{flags}" %1 : (!llvm.ptr) -> ()
    cir.return
  }

  cir.func @t4(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
    cir.asm(has_side_effects, x86_att, {"" "=&r,=&r,1,~{dirflag},~{fpsr},~{flags}"}) %1 : (!s32i) -> ()
    // CHECK: llvm.inline_asm asm_dialect = att operand_attrs = [] "", "=&r,=&r,1,~{dirflag},~{fpsr},~{flags}" %2 : (i32) -> ()
    cir.return
  }
}
