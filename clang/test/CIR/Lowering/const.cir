// RUN: cir-opt %s -cir-to-llvm -o %t.mlir
// RUN: FileCheck --input-file=%t.mlir %s

!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
module {
  cir.func @testArrZeroInit() {
    %0 = cir.alloca !cir.array<!s32i x 2>, cir.ptr <!cir.array<!s32i x 2>>, ["a"] {alignment = 4 : i64}
    // CHECK: %0 = llvm.mlir.constant(1 : index) : i64
    // CHECK: %1 = llvm.alloca %0 x !llvm.array<2 x i32> {alignment = 4 : i64} : (i64) -> !llvm.ptr    
    %1 = cir.const(#cir.zero : !cir.array<!s32i x 2>) : !cir.array<!s32i x 2>
    // CHECK: %2 = cir.llvmir.zeroinit : !llvm.array<2 x i32>
    cir.store %1, %0 : !cir.array<!s32i x 2>, cir.ptr <!cir.array<!s32i x 2>>
    // CHECK: llvm.store %2, %1 : !llvm.array<2 x i32>, !llvm.ptr
    cir.return
  }

  cir.func @testConstArrInit() {
    %0 = cir.const(#cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7>) : !cir.array<!s8i x 7>
    // CHECK: llvm.mlir.constant(dense<[115, 116, 114, 105, 110, 103, 0]> : tensor<7xi8>) : !llvm.array<7 x i8>
    %1 = cir.const(#cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i]> : !cir.array<!s32i x 2>) : !cir.array<!s32i x 2>
    // CHECK: llvm.mlir.constant(dense<[1, 2]> : tensor<2xi32>) : !llvm.array<2 x i32>
    %3 = cir.const(#cir.const_array<[1.000000e+00 : f32, 2.000000e+00 : f32]> : !cir.array<f32 x 2>) : !cir.array<f32 x 2>
    // CHECK: llvm.mlir.constant(dense<[1.000000e+00, 2.000000e+00]> : tensor<2xf32>) : !llvm.array<2 x f32>
    cir.return
  }
}
